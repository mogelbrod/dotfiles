snippet main
	int main(int argc, const char *argv[]) {
		${1}
		return 0;
	}
snippet mainn
	int main(void) {
		${1}
		return 0;
	}
snippet inc #include <...>
	#include <${1:stdio}.h>${2}
snippet Inc #include "..."
	#include "${1:`Filename("$1.h")`}"${2}
snippet Def #ifndef ... #define ... #endif
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif${3}
snippet def
	#define ${1}
snippet ifdef
	#ifdef ${1:FOO}
		${2:#define }${3}
	#endif
snippet #if
	#if ${1:FOO}
		${2}
	#endif
snippet once Header Include-Guard
	#ifndef ${1:`substitute(toupper(Filename('__$1_H__', '__UNTITLED_H__')), '-', '_', 'g')`}
	#define $1

	${2}

	#endif /* end of include guard: $1 */
snippet if
	if (${1}) {
		${2}
	}
snippet el
	else {
		${1}
	}
snippet t
	${1} ? ${2:a} : ${3:b}
snippet do
	do {
		${2}
	} while (${1});
snippet wh
	while (${1}) {
		${2}
	}
snippet for
	for (${2:int }${3:i} = 0; $3 < ${1:count}; $3) {
		${5}
	}
snippet fun
	${1:void} ${2:function_name}(${3}) {
		${4}
	}
snippet fund
	${1:void} ${2:function_name}(${3});${4}
snippet td Typedef
	typedef ${1:int} ${2:MyCustomType};${3}
snippet struct Struct
	struct ${1:`Filename('$1_t', 'name')`} {
		${2}
	}${3};${4}
snippet tds Typedef struct
	typedef struct ${2:_$1 }{
		${3}
	} ${1:`Filename('$1_t', 'name')`};
snippet tde Typdef enum
	typedef enum {
		${1}
	} ${2:foo};
snippet pr printf
	printf("${1:%s}\n"${2});${3}
snippet fpr fprintf
	fprintf(${1:stderr}, "${2:%s}\n"${3});${4}
snippet scanf
	scanf("${1:%d}", &${2:var});${3}
snippet . [..]
	[${1}]${2}
