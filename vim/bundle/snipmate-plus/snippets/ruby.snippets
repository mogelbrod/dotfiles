snippet 3
	#{${1}}${2}
snippet #
	#{${1}}${2}
# #!/usr/bin/env ruby
snippet #!
	#!/usr/bin/env ruby
	${1}
# New Block
snippet =b
	=begin
		${1}
	=end
snippet begin
	begin
		${3}
	rescue ${1:Exception} => ${2:e}
	end
snippet req
	require '${1}'${2}
snippet end
	__END__
snippet case
	case ${1:object}
	when ${2:condition}
		${3}
	end
snippet when
	when ${1:condition}
		${2}
snippet def
	def ${1:method_name}
		${2}
	end
snippet defs def self.
	def self.${1:class_method_name}
		${2}
	end
snippet deft def test_
	def test_${1:case_name}
		${2}
	end
snippet if
	if ${1:condition}
		${2}
	end
snippet ife
	if ${1:condition}
		${2}
	else
		${3}
	end
snippet elsif
	elsif ${1:condition}
		${2}
snippet unless
	unless ${1:condition}
		${2}
	end
snippet while
	while ${1:condition}
		${2}
	end
snippet for
	for ${1:e} in ${2:c}
		${3}
	end		
snippet until
	until ${1:condition}
		${2}
	end
snippet cls class .. end
	class ${1:`substitute(Filename(), '^.', '\u&', '')`}
		${2}
	end
snippet cls class .. initialize .. end
	class ${1:`substitute(Filename(), '^.', '\u&', '')`}
		def initialize(${2:args})
			${3}
		end
	end
snippet cls class .. < ParentClass .. initialize .. end
	class ${1:`substitute(Filename(), '^.', '\u&', '')`} < ${2:ParentClass}
		def initialize(${3:args})
			${4}
		end


	end
snippet cls ClassName = Struct .. end
	${1:`substitute(Filename(), '^.', '\u&', '')`} = Struct.new(:${2:attr_names}) do
	end
snippet cls class << self .. end
	class << ${1:self}
		${2}
	end
snippet mod module .. end
	module ${1:`substitute(Filename(), '^.', '\u&', '')`}
		${2}
	end
snippet mod module .. Included .. end
	module ${1:`substitute(Filename(), '^.', '\u&', '')`}
		module ClassMethods
			${2}
		end

		module InstanceMethods

		end

		def self.included(receiver)
			receiver.extend         ClassMethods
			receiver.send :include, InstanceMethods
		end
	end
snippet r reader
	attr_reader :${1:attr_names}
snippet w writer
	attr_writer :${1:attr_names}
snippet rw accessor
	attr_accessor :${1:attr_names}
snippet Enum include Enumerable
	include Enumerable

	def each(&block)
		${1}
	end
snippet Comp include Comparable
	include Comparable

	def <=>(other)
		${1}
	end
snippet defmm method missing
	def method_missing(meth, *args, &blk)
		${1}
	end
snippet am
	alias_method :${1:new_name}, :${2:old_name}
snippet array
	Array.new(${1:10}) { |${2:i}| ${3} }
snippet hash
	Hash.new { |${1:hash}, ${2:key}| $1[$2] = ${3} }
snippet file File.foreach() { |line| .. }
	File.foreach(${1:"path/to/file"}) { |${2:line}| ${3} }
snippet file File.read()
	File.read(${1:"path/to/file"})${2}
snippet Dir Dir.global() { |file| .. }
	Dir.glob(${1:"dir/glob/*"}) { |${2:file}| ${3} }
snippet Dir Dir[".."]
	Dir[${1:"**/*.rb"}]${2}
snippet dir dirname(file)
	Filename.dirname(__FILE__)
snippet deli
	delete_if { |${1:e}| ${2} }
snippet fill
	fill(${1:range}) { |${2:i}| ${3} }
# flatten_once()
snippet flao
	inject(Array.new) { |${1:arr}, ${2:a}| $1.push(*$2)}${3}
snippet zip
	zip(${1:enums}) { |${2:row}| ${3} }
# downto(0) { |n| .. }
snippet downto
	downto(${1:0}) { |${2:n}| ${3} }
snippet step
	step(${1:2}) { |${2:n}| ${3} }
snippet times
	times { |${1:n}| ${2} }
snippet upto
	upto(${1:1.0/0.0}) { |${2:n}| ${3} }
snippet each
	each { |${1:e}| ${2} }
snippet eachd
	each do |${1:e}|
		${2}
	end	
snippet eak
	each_key { |${1:key}| ${2} }
snippet reveach
	reverse_each { |${1:e}| ${2} }
snippet inj
	inject(${1:init}) { |${2:mem}, ${3:var}| ${4} }
snippet injd
	inject(${1:init}) do |${2:mem}, ${3:var}|
		${4}
	end		
snippet map
	map { |${1:e}| ${2} }
snippet mapd
	map do |${1:e}| 
		${2}
	end		
snippet sort
	sort { |a, b| ${1} }
snippet sortby
	sort_by { |${1:e}| ${2} }
snippet all
	all? { |${1:e}| ${2} }
snippet any
	any? { |${1:e}| ${2} }
snippet col
	collect { |${1:e}| ${2} }
snippet cold
	collect do |${1:e}|
		${2}
	end
snippet find
	find { |${1:e}| ${2} }
snippet findd
	find do |${1:e}|
		${2}
	end		
snippet grep
	grep(${1:/pattern/}) { |${2:match}| ${3} }
snippet sub
	${1:g}sub(${2:/pattern/}) { |${3:match}| ${4} }
snippet scan
	scan(${1:/pattern/}) { |${2:match}| ${3} }
snippet scand
	scan(${1:/pattern/}) do |${2:match}|
		${3}
	end		
snippet max
	max { |a, b| ${1} }
snippet min
	min { |a, b| ${1} }
snippet rej
	reject { |${1:e}| ${2} }
snippet rejd
	reject do |${1:e}|
		${2}
	end
snippet sel
	select { |${1:e}| ${2} }
snippet seld
	select do |${1:e}|
		${2}
	end		
snippet lam
	lambda { |${1:args}| ${2} }
snippet do
	do |${1:variable}|
		${2}
	end
snippet :
	:${1:key} => ${2:"value"}${3}
snippet open
	open(${1:"path/or/url/or/pipe"}, "${2:w}") { |${3:io}| ${4} }
