snippet 3 "string interpolation" w
\$\{$1}
endsnippet

snippet v "var" w
var $0
endsnippet

snippet l "let" w
let $0
endsnippet

snippet c "const" w
const $0
endsnippet

snippet r "return" w
return$0
endsnippet

snippet t "this" w
this.$0
endsnippet

snippet class "class" w
class $1 {
	constructor($2) {
		$3
	}
}
endsnippet

snippet f "Arrow function" w
($1) => $0
endsnippet

snippet fn "Function (inline)" w
function($1) {
	${VISUAL}$2
}
endsnippet

snippet fnn "Function (named)" w
function ${1:function_name}($2) {
	${VISUAL}$3
}
endsnippet

snippet typeof! "LiveScript typeof!" w
{}.toString.call(${1:value}).slice(8, -1)
endsnippet

snippet req "Require"
require('${1:lib}')
endsnippet

snippet vreq "Assigned require"
var ${2:${1/(.+\/)*(\w+)(-|\b|$)(\..+$)?/\u$2/g}} = require('$1')
endsnippet

snippet imp "Import statement" b
import ${2:${1/(.+\/)*(\w+)(-|\b|$)(\..+$)?/\u$2/g}} from '$1'
endsnippet

snippet exp "export" w
export $0
endsnippet

snippet def "default" w
default $0
endsnippet

snippet iif "Immediately-Invoked Function Expression (iife)"
(function (${1}) {
	${VISUAL}$0
}(${2:$1}));
endsnippet

snippet ret "return" w
return $0
endsnippet

snippet :v "Object Value JS"
${1:value_name}: ${0:value},
endsnippet

snippet : "Object key key: 'value'"
${1:key}: ${2:"${3:value}"}${4:, }
endsnippet

snippet forin "for (x in y)"
for (var ${2:key} in ${1:obj}) {
	${3:$1[$2]}${VISUAL}$0
}
endsnippet

snippet for "for (...) {...}"
for (var ${2:i} = 0; $2 < ${1:things}.length; $2++) {
	${3:$1[$2]}${VISUAL}$0
}
endsnippet

snippet forr "for (...) {...} (faster)"
for (var ${2:i} = ${1:things}.length - 1; $2 >= 0; $2--) {
	${3:$1[$2]}${VISUAL}$0
}
endsnippet


snippet ife "if ___ else"
if (${1:condition}) {
  ${2://code}
} else {
  ${3://code}
}
endsnippet

snippet if "if"
if (${1:condition}) {
  ${VISUAL}$0
}
endsnippet

snippet sto "setTimeout"
setTimeout(function() {${2}}, ${1:10})
endsnippet

snippet sint "setInterval"
setInterval(function() {${2}}, ${1:100})
endsnippet

snippet byid "getElementById" w
getElementById('${1}')${2}
endsnippet

snippet bytag "getElementsByTagName" w
getElementsByTagName('${1}')${2}
endsnippet

snippet $ "$(...)"
$(${1:'#sel'})${0}
endsnippet

snippet $r "jQuery DOM ready function"
$(function() {
	${1}
});
endsnippet

snippet ### "JSDoc line" b
/** ${1} */${0}
endsnippet

snippet ## "JSDoc bloc" b
/**
 * ${1}
 *
 * @param ${2}
 * @return ${0}
 */
endsnippet

snippet cl "console.log" w
console.log($0)
endsnippet

snippet cld "console.log debug" w
console.log("${1:value}", ${2:$1})
endsnippet

snippet cw "console.warn"
console.warn($0)
endsnippet

snippet ce "console.error"
console.error($0)
endsnippet

snippet ca "console.assert"
console.assert(${1:assertion}, ${2:"${3:message}"})
endsnippet

snippet cgroup "console.group"
console.group("${1:label}")
${VISUAL}$0
console.groupEnd()
endsnippet

snippet ctime "console.time"
console.time("${1:label}")
${VISUAL}$0
console.timeEnd("$1")
endsnippet

snippet ctimestamp "console.timestamp"
console.timeStamp("${1:label}")
endsnippet

snippet ctrace "console.trace"
console.trace()
endsnippet

snippet rp "PropTypes" w
PropTypes.
endsnippet

snippet rce "React.createElement" w
React.createElement
endsnippet

snippet rcl "React.cloneElement" w
React.cloneElement
endsnippet

snippet reactclass "React.createClass"
React.createClass({
	displayName: '${1:Component}',
	propTypes: {},
	getDefaultProps() {},
	getInitialState() {},
	render() {
		return null
	}
})
endsnippet

snippet impr "Import React modules"
import classNames from 'classnames'
import PropTypes from 'prop-types'
import React from 'react'
$0
endsnippet

snippet reactcomp "Extend React.Component"
class ${1:Component} extends React.Component {
	static propTypes = {}
	static defaultProps = {}

	constructor(props) {
		super(props)
		this.state = {}
	}

	render() {
		return null
	}
}
endsnippet

snippet rcon "React constructor"
constructor(props) {
	super(props)

	this.state = {
		$0
	}
}
endsnippet

snippet cwm "React componentWillMount"
UNSAFE_componentWillMount() {
	$0
}
endsnippet

snippet cdm "React componentDidMount"
componentDidMount() {
	$0
}
endsnippet

snippet cwrp "React componentWillReceiveProps"
UNSAFE_componentWillReceiveProps(props) {
	$0
}
endsnippet

snippet scu "React shouldComponentUpdate"
shouldComponentUpdate(props, state) {
	$0
}
endsnippet

snippet cdu "React componentDidUpdate"
componentDidUpdate(prevProps, prevState) {
	$0
}
endsnippet

snippet cwun "React componentWillUnmount"
componentWillUnmount() {
	$0
}
endsnippet

snippet gds "React getDerivedStateFromProps"
static getDerivedStateFromProps(nextProps, prevState) {
	$0
}
endsnippet

snippet rcontext "Create React context" w
const ${1:contextName} = React.createContext()
endsnippet

snippet cref "Create ref statement used inside constructor" w
this.${1:refName}Ref = React.createRef()
endsnippet

snippet sst "setState" w
this.setState($1)
endsnippet

snippet tp "this.props" w
this.props.
endsnippet

snippet ts "this.state" w
this.state.
endsnippet

snippet nary "Array of length N" w
Array.apply(null, {length: ${1:10}}).map((_, i) => ${2:i+1})
endsnippet

snippet keys "Object.keys()" w
Object.keys(${1:obj})
endsnippet

snippet toset "Convert Array to set" w
${1:array}.reduce((o, k) => (o[k] = true, o), {})
endsnippet

snippet tdesc "Mocha describe" !b
describe('$1', () => {
	$0
})
endsnippet

snippet tit "Mocha it" !b
it('$1', () => {
	$0
})
endsnippet

# vim:ft=snippets:
