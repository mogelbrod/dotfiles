snippet 3 "string interpolation" w
\$\{$1}$0
endsnippet

snippet v "var" w
var $0
endsnippet

snippet l "let" w
let $0
endsnippet

snippet c "const" w
const $0
endsnippet

snippet r "return" w
return$0;
endsnippet

snippet t "this" w
this.$0
endsnippet

snippet class "class" w
class $1 {
	constructor($2) {
		$3
	}
}
endsnippet

snippet f "Arrow function" w
${1:()} => $0
endsnippet

snippet fn "Function (inline)" w
function($1) {
	${VISUAL}$2
}$0
endsnippet

snippet fnn "Function (named)" w
function ${1:function_name}($2) {
	${VISUAL}$3
}$0
endsnippet

snippet typeof! "LiveScript typeof!" w
{}.toString.call(${1:value}).slice(8, -1)$0
endsnippet

snippet imp "Import statement" b
import ${1} from '$0';
endsnippet

snippet iif "Immediately-Invoked Function Expression (iife)" b
(function (${1}) {
	${VISUAL}$0
}(${2:$1}));
endsnippet

snippet ret "return" w
return $0
endsnippet

snippet :v "Object Value JS"
${1:value_name}: ${0:value},
endsnippet

snippet : "Object key key: 'value'"
${1:key}: ${2:"${3:value}"}${4:, }
endsnippet

snippet forin "for (x in y)"
for (var ${2:key} in ${1:obj}) {
	${3:$1[$2]}${VISUAL}$0
}
endsnippet

snippet for "for (...) {...}"
for (var ${2:i}=0; $2 < ${1:things}.length; $2++) {
	${3:$1[$2]}${VISUAL}$0
}
endsnippet

snippet forr "for (...) {...} (faster)"
for (var ${2:i} = ${1:things}.length - 1; $2 >= 0; $2--) {
	${3:$1[$2]}${VISUAL}$0
}
endsnippet


snippet ife "if ___ else"
if (${1:condition}) {
  ${2://code}
} else {
  ${3://code}
}
endsnippet

snippet if "if"
if (${1:condition}) {
  ${VISUAL}$0
}
endsnippet

snippet sto "setTimeout"
setTimeout(function() {${2}}, ${1:10});$0
endsnippet

snippet sint "setInterval"
setInterval(function() {${2}}, ${1:100});$0
endsnippet

snippet byid "getElementById" w
getElementById('${1}')${2}
endsnippet

snippet bytag "getElementsByTagName" w
getElementsByTagName('${1}')${2}
endsnippet

snippet $ "$(...)"
$(${1:'#sel'})${0}
endsnippet

snippet $r "jQuery DOM ready function"
$(function() {
	${1}
});
endsnippet

snippet ## "JSDoc bloc" b
/**
 * ${1}
 *
 * @param ${2}
 * @return ${0}
 */
endsnippet

snippet req "Require"
require('${1:lib}');${2}
endsnippet

snippet areq "Assigned require"
var ${1:lib} = require('${2:$1}');${3}
endsnippet

snippet cl "console.log" w
console.log($0);
endsnippet

snippet cld "console.log debug" w
console.log("${1:value}", ${2:$1});
endsnippet

snippet cw "console.warn"
console.warn($0);
endsnippet

snippet ce "console.error"
console.error($0);
endsnippet

snippet ca "console.assert"
console.assert(${1:assertion}, ${2:"${3:message}"});$0
endsnippet

snippet cgroup "console.group"
console.group("${1:label}");
${VISUAL}$0
console.groupEnd();
endsnippet

snippet ctime "console.time"
console.time("${1:label}");
${VISUAL}$0
console.timeEnd("$1");
endsnippet

snippet ctimestamp "console.timestamp"
console.timeStamp("${1:label}")
endsnippet

snippet ctrace "console.trace"
console.trace();
endsnippet

snippet reactclass "React.createClass"
React.createClass({
	displayName: '${1:Component}',
	mixins: [],
	propTypes: {},
	getDefaultProps() {},
	getInitialState() {},
	render() {
		return null;
	}
});
endsnippet

snippet reactcomp "Extend React.Component"
class ${1:Component} extends React.Component {
	constructor(props) {
		super(props);
		this.state = {};
	}
	render() {
		return null;
	}
}
$1.propTypes = {};
$1.defaultProps = {};
endsnippet

# vim:ft=snippets:
